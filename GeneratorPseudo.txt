OOP PseudoCode
//all term explanations here are from my basic understanding. Please feel free to correct me.

Object:Generator(starting a generator)

//defining an interface (these are the compulsory functions of a class which differ in implementation(they are not implemented here))

declare interface Generator{
	function sound();
}

//defining an abstract class(these are the compulsory functions of a class. They can be implemeted here)

declare abstract class Gen{
	function giveLight(){"Light comes on"};
}
class Key{
	function turn(){
		console.log('Key is turned');
	}
}
class Rope{
	function draw(){
		console.log('The rope is drawn');
	}
}
class Start{
	import Key;
	import Rope;
	constructor start(key){
		this.key = Key;
	}
	constructor start(key, rope){
		this.key = Key;
		this.rope = Rope;
	}
	if(this.rope === null){
		this.key.turn();
		console.log('The Generator is started');
	}
	else{
		this.key.turn();
		this.rope.draw();
		console.log('The Noisy Generator is started');
	}
}

class silentGen extends Generator, Gen{
	import Start;
	constructor silentGen(){
		this.start(key);}
	function sound(){console.log('tsh tsh tshhhhh')}
}
class noisyGen extends Generator, Gen{
	import Start;
	constructor noisyGen(){
		this.start(key, rope);}
	function sound(){console.log('dum dum dummm')}
}
class program extends Start{
	Key metalKey = new Key();
	Rope longRope = new Rope();
	silentGen lister = new silentGen();
	noisyGen tiger = new noisyGen();
	lister.makeNoise(); //outputs tsh tsh tshhhhh
	tiger.makeNoise(); //outputs dum dum dummmm
	lister.giveLight(); 
	tiger.giveLight(); //outputs Light comes on
	
}

//these concepts are not based primarily on any language.